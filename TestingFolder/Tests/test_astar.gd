extends GutTest

var vec1= Vector2i(0,0)
var vec2= Vector2i(0,0)
var vec3= Vector2i(3,12)
var vec4= Vector2i(3,12)
var vec5= Vector2i(7,92)

func test_array_compare_vectors():
	assert_true(CustomMath.compare_vectors(vec1, vec2))
	
	assert_true(CustomMath.compare_vectors(vec3,vec4))
	
	assert_false(CustomMath.compare_vectors(vec3,vec5))

func test_array_find_vector_1():
	var arr1: Array[Vector2i] = [vec1,vec2,vec3,vec4,vec5]
	var arr2: Array[Vector2i] = [vec1,vec2,vec3,vec4,vec5]
	
	for vec in arr1:
		assert_true(CustomMath.find_in_array(vec, arr2))

func test_array_find_vector_2():
	var arr1: Array[Vector2i] = [Vector2i(0,0), Vector2i(5,14),
	 Vector2i(0,9), Vector2i(4,16),
	 Vector2i(2,1), Vector2i(4,1),
	 Vector2i(54,2)]
	
	assert_true(CustomMath.find_in_array(Vector2i(0,0),arr1))
	assert_true(CustomMath.find_in_array(Vector2i(0,9),arr1))
	assert_true(CustomMath.find_in_array(Vector2i(4,1),arr1))
	assert_false(CustomMath.find_in_array(Vector2i(7,12),arr1))
	
	
func test_array_find_vector_3():
	var arr1:Array[Vector2i] =[Vector2i(0, 0), Vector2i(1, 0), Vector2i(2, 0), Vector2i(3, 0), Vector2i(4, 0), Vector2i(5, 0), Vector2i(6, 0), Vector2i(7, 0), Vector2i(8, 0), Vector2i(9, 0), Vector2i(10, 0), Vector2i(11, 0), Vector2i(12, 0), Vector2i(13, 0), Vector2i(14, 0), Vector2i(15, 0), Vector2i(16, 0), Vector2i(17, 0), Vector2i(18, 0), Vector2i(19, 0), Vector2i(20, 0), Vector2i(21, 0), Vector2i(22, 0), Vector2i(23, 0), Vector2i(24, 0), Vector2i(25, 0), Vector2i(25, 1), Vector2i(24, 1), Vector2i(23, 1), Vector2i(22, 1), Vector2i(21, 1), Vector2i(20, 1), Vector2i(19, 1), Vector2i(18, 1), Vector2i(17, 1), Vector2i(16, 1), Vector2i(15, 1), Vector2i(14, 1), Vector2i(13, 1), Vector2i(12, 1), Vector2i(11, 1), Vector2i(10, 1), Vector2i(9, 1), Vector2i(8, 1), Vector2i(7, 1), Vector2i(6, 1), Vector2i(5, 1), Vector2i(4, 1), Vector2i(3, 1), Vector2i(2, 1), Vector2i(1, 1), Vector2i(0, 1), Vector2i(0, 2), Vector2i(1, 2), Vector2i(2, 2), Vector2i(3, 2), Vector2i(4, 2), Vector2i(5, 2), Vector2i(6, 2), Vector2i(7, 2), Vector2i(8, 2), Vector2i(9, 2), Vector2i(10, 2), Vector2i(11, 2), Vector2i(12, 2), Vector2i(13, 2), Vector2i(14, 2), Vector2i(15, 2), Vector2i(16, 2), Vector2i(17, 2), Vector2i(18, 2), Vector2i(19, 2), Vector2i(20, 2), Vector2i(21, 2), Vector2i(22, 2), Vector2i(23, 2), Vector2i(24, 2), Vector2i(25, 2), Vector2i(25, 3), Vector2i(24, 3), Vector2i(23, 3), Vector2i(22, 3), Vector2i(21, 3), Vector2i(20, 3), Vector2i(19, 3), Vector2i(18, 3), Vector2i(17, 3), Vector2i(16, 3), Vector2i(16, 4), Vector2i(17, 4), Vector2i(18, 4), Vector2i(19, 4), Vector2i(20, 4), Vector2i(21, 4), Vector2i(22, 4), Vector2i(23, 4), Vector2i(24, 4), Vector2i(25, 4), Vector2i(25, 5), Vector2i(24, 5), Vector2i(23, 5), Vector2i(22, 5), Vector2i(21, 5), Vector2i(20, 5), Vector2i(19, 5), Vector2i(18, 5), Vector2i(17, 5), Vector2i(16, 5), Vector2i(16, 6), Vector2i(17, 6), Vector2i(18, 6), Vector2i(19, 6), Vector2i(20, 6), Vector2i(21, 6), Vector2i(22, 6), Vector2i(23, 6), Vector2i(24, 6), Vector2i(25, 6), Vector2i(26, 6), Vector2i(26, 7), Vector2i(25, 7), Vector2i(24, 7), Vector2i(23, 7), Vector2i(22, 7), Vector2i(21, 7), Vector2i(20, 7), Vector2i(19, 7), Vector2i(18, 7), Vector2i(17, 7), Vector2i(16, 7), Vector2i(16, 8), Vector2i(17, 8), Vector2i(18, 8), Vector2i(19, 8), Vector2i(20, 8), Vector2i(21, 8), Vector2i(22, 8), Vector2i(23, 8), Vector2i(24, 8), Vector2i(25, 8), Vector2i(26, 8), Vector2i(26, 9), Vector2i(25, 9), Vector2i(24, 9), Vector2i(23, 9), Vector2i(22, 9), Vector2i(21, 9), Vector2i(20, 9), Vector2i(19, 9), Vector2i(18, 9), Vector2i(17, 9), Vector2i(16, 9), Vector2i(16, 10), Vector2i(17, 10), Vector2i(18, 10), Vector2i(19, 10), Vector2i(20, 10), Vector2i(21, 10), Vector2i(22, 10), Vector2i(23, 10), Vector2i(24, 10), Vector2i(25, 10), Vector2i(26, 10), Vector2i(26, 11), Vector2i(25, 11), Vector2i(24, 11), Vector2i(23, 11), Vector2i(22, 11), Vector2i(21, 11), Vector2i(20, 11), Vector2i(19, 11), Vector2i(18, 11), Vector2i(17, 11), Vector2i(16, 11), Vector2i(16, 12), Vector2i(17, 12), Vector2i(18, 12), Vector2i(19, 12), Vector2i(20, 12), Vector2i(21, 12), Vector2i(22, 12), Vector2i(23, 12), Vector2i(24, 12), Vector2i(25, 12), Vector2i(26, 12), Vector2i(26, 13), Vector2i(25, 13), Vector2i(24, 13), Vector2i(23, 13), Vector2i(22, 13), Vector2i(21, 13), Vector2i(20, 13), Vector2i(19, 13), Vector2i(18, 13), Vector2i(17, 13), Vector2i(16, 13), Vector2i(16, 14), Vector2i(17, 14), Vector2i(18, 14), Vector2i(19, 14), Vector2i(20, 14), Vector2i(21, 14), Vector2i(22, 14), Vector2i(23, 14), Vector2i(24, 14), Vector2i(25, 14), Vector2i(26, 14), Vector2i(26, 15), Vector2i(25, 15), Vector2i(24, 15), Vector2i(23, 15), Vector2i(25, 15), Vector2i(24, 15), Vector2i(23, 15), Vector2i(17, 14), Vector2i(18, 14), Vector2i(19, 14), Vector2i(20, 14), Vector2i(21, 14), Vector2i(22, 14), Vector2i(23, 14), Vector2i(24, 14), Vector2i(25, 14), Vector2i(26, 14), Vector2i(25, 13), Vector2i(24, 13), Vector2i(23, 13), Vector2i(22, 13), Vector2i(21, 13), Vector2i(20, 13), Vector2i(19, 13), Vector2i(18, 13), Vector2i(17, 13), Vector2i(16, 13), Vector2i(17, 12), Vector2i(18, 12), Vector2i(19, 12), Vector2i(20, 12), Vector2i(21, 12), Vector2i(22, 12), Vector2i(23, 12), Vector2i(24, 12), Vector2i(25, 12), Vector2i(26, 12), Vector2i(25, 11), Vector2i(24, 11), Vector2i(23, 11), Vector2i(22, 11), Vector2i(21, 11), Vector2i(20, 11), Vector2i(19, 11), Vector2i(18, 11), Vector2i(17, 11), Vector2i(16, 11), Vector2i(17, 10), Vector2i(18, 10), Vector2i(19, 10), Vector2i(20, 10), Vector2i(21, 10), Vector2i(22, 10), Vector2i(23, 10), Vector2i(24, 10), Vector2i(25, 10), Vector2i(26, 10), Vector2i(25, 9), Vector2i(24, 9), Vector2i(23, 9), Vector2i(22, 9), Vector2i(21, 9), Vector2i(20, 9), Vector2i(19, 9), Vector2i(18, 9), Vector2i(17, 9), Vector2i(16, 9), Vector2i(17, 8), Vector2i(18, 8), Vector2i(19, 8), Vector2i(20, 8), Vector2i(21, 8), Vector2i(22, 8), Vector2i(23, 8), Vector2i(24, 8), Vector2i(25, 8), Vector2i(26, 8), Vector2i(25, 7), Vector2i(24, 7), Vector2i(23, 7), Vector2i(22, 7), Vector2i(21, 7), Vector2i(20, 7), Vector2i(19, 7), Vector2i(18, 7), Vector2i(17, 7), Vector2i(16, 7), Vector2i(17, 6), Vector2i(18, 6), Vector2i(19, 6), Vector2i(20, 6), Vector2i(21, 6), Vector2i(22, 6), Vector2i(23, 6), Vector2i(24, 6), Vector2i(25, 6), Vector2i(24, 5), Vector2i(23, 5), Vector2i(22, 5), Vector2i(21, 5), Vector2i(20, 5), Vector2i(19, 5), Vector2i(18, 5), Vector2i(17, 5), Vector2i(16, 5), Vector2i(17, 4), Vector2i(18, 4), Vector2i(19, 4), Vector2i(20, 4), Vector2i(21, 4), Vector2i(22, 4), Vector2i(23, 4), Vector2i(24, 4), Vector2i(25, 4), Vector2i(24, 3), Vector2i(23, 3), Vector2i(22, 3), Vector2i(21, 3), Vector2i(20, 3), Vector2i(19, 3), Vector2i(18, 3), Vector2i(17, 3), Vector2i(16, 3), Vector2i(13, 3), Vector2i(12, 3), Vector2i(11, 3), Vector2i(10, 3), Vector2i(10, 4), Vector2i(11, 4), Vector2i(12, 4), Vector2i(13, 4), Vector2i(13, 5), Vector2i(12, 5), Vector2i(11, 5), Vector2i(10, 5), Vector2i(10, 6), Vector2i(11, 6), Vector2i(12, 6), Vector2i(13, 6), Vector2i(13, 7), Vector2i(12, 7), Vector2i(11, 7), Vector2i(10, 7), Vector2i(10, 8), Vector2i(11, 8), Vector2i(12, 8), Vector2i(13, 8), Vector2i(13, 9), Vector2i(12, 9), Vector2i(11, 9), Vector2i(10, 9), Vector2i(9, 9), Vector2i(9, 8), Vector2i(8, 8), Vector2i(7, 8), Vector2i(6, 8), Vector2i(5, 8), Vector2i(4, 8), Vector2i(3, 8), Vector2i(2, 8), Vector2i(1, 8), Vector2i(0, 8), Vector2i(0, 9), Vector2i(1, 9), Vector2i(2, 9), Vector2i(3, 9), Vector2i(4, 9), Vector2i(5, 9), Vector2i(6, 9), Vector2i(7, 9), Vector2i(8, 9), Vector2i(8, 10), Vector2i(9, 10), Vector2i(10, 10), Vector2i(11, 10), Vector2i(12, 10), Vector2i(13, 10), Vector2i(14, 10), Vector2i(14, 11), Vector2i(13, 11), Vector2i(12, 11), Vector2i(11, 11), Vector2i(10, 11), Vector2i(9, 11), Vector2i(8, 11), Vector2i(7, 11), Vector2i(7, 10), Vector2i(6, 10), Vector2i(5, 10), Vector2i(4, 10), Vector2i(3, 10), Vector2i(2, 10), Vector2i(1, 10), Vector2i(0, 10), Vector2i(0, 11), Vector2i(1, 11), Vector2i(2, 11), Vector2i(3, 11), Vector2i(4, 11), Vector2i(5, 11), Vector2i(6, 11), Vector2i(6, 12), Vector2i(7, 12), Vector2i(8, 12), Vector2i(9, 12), Vector2i(10, 12), Vector2i(11, 12), Vector2i(12, 12), Vector2i(13, 12), Vector2i(14, 12), Vector2i(14, 13), Vector2i(13, 13), Vector2i(12, 13), Vector2i(11, 13), Vector2i(10, 13), Vector2i(9, 13), Vector2i(8, 13), Vector2i(7, 13), Vector2i(6, 13), Vector2i(5, 13), Vector2i(5, 12), Vector2i(4, 12), Vector2i(3, 12), Vector2i(2, 12), Vector2i(1, 12), Vector2i(0, 12), Vector2i(0, 13), Vector2i(1, 13), Vector2i(2, 13), Vector2i(3, 13), Vector2i(4, 13), Vector2i(4, 14), Vector2i(5, 14), Vector2i(6, 14), Vector2i(7, 14), Vector2i(8, 14), Vector2i(9, 14), Vector2i(10, 14), Vector2i(11, 14), Vector2i(12, 14), Vector2i(13, 14), Vector2i(14, 14), Vector2i(13, 15), Vector2i(3, 14), Vector2i(2, 14), Vector2i(1, 14), Vector2i(0, 14), Vector2i(3, 14), Vector2i(2, 14), Vector2i(1, 14), Vector2i(0, 14), Vector2i(1, 13), Vector2i(2, 13), Vector2i(3, 13), Vector2i(4, 13), Vector2i(4, 13), Vector2i(5, 14), Vector2i(6, 14), Vector2i(7, 14), Vector2i(8, 14), Vector2i(9, 14), Vector2i(10, 14), Vector2i(11, 14), Vector2i(12, 14), Vector2i(13, 14), Vector2i(14, 14), Vector2i(13, 13), Vector2i(12, 13), Vector2i(11, 13), Vector2i(10, 13), Vector2i(9, 13), Vector2i(8, 13), Vector2i(7, 13), Vector2i(5, 12), Vector2i(6, 13), Vector2i(5, 12), Vector2i(4, 12), Vector2i(3, 12), Vector2i(2, 12), Vector2i(1, 12), Vector2i(0, 12), Vector2i(1, 11), Vector2i(2, 11), Vector2i(3, 11), Vector2i(4, 11), Vector2i(5, 11), Vector2i(6, 11), Vector2i(6, 11), Vector2i(7, 12), Vector2i(8, 12), Vector2i(9, 12), Vector2i(10, 12), Vector2i(11, 12), Vector2i(12, 12), Vector2i(13, 12), Vector2i(14, 12), Vector2i(13, 11), Vector2i(12, 11), Vector2i(11, 11), Vector2i(10, 11), Vector2i(9, 11), Vector2i(7, 10), Vector2i(8, 11), Vector2i(7, 10), Vector2i(6, 10), Vector2i(5, 10), Vector2i(4, 10), Vector2i(3, 10), Vector2i(2, 10), Vector2i(1, 10), Vector2i(0, 10), Vector2i(1, 9), Vector2i(2, 9), Vector2i(3, 9), Vector2i(4, 9), Vector2i(5, 9), Vector2i(6, 9), Vector2i(7, 9), Vector2i(8, 9), Vector2i(8, 9), Vector2i(9, 10), Vector2i(10, 10), Vector2i(11, 10), Vector2i(12, 10), Vector2i(13, 10), Vector2i(12, 9), Vector2i(11, 9), Vector2i(9, 8), Vector2i(10, 9), Vector2i(11, 8), Vector2i(12, 8), Vector2i(13, 8), Vector2i(12, 7), Vector2i(11, 7), Vector2i(10, 7), Vector2i(11, 6), Vector2i(12, 6), Vector2i(13, 6), Vector2i(12, 5), Vector2i(11, 5), Vector2i(10, 5), Vector2i(11, 4), Vector2i(12, 4), Vector2i(13, 4), Vector2i(12, 3), Vector2i(11, 3), Vector2i(10, 3), Vector2i(1, 2)]
	assert_true(CustomMath.find_in_array(Vector2i(0,0),arr1))
	assert_true(CustomMath.find_in_array(Vector2i(1,2),arr1))
	
	
	pass



func test_vector_array_tail():
	var arr1: Array[Vector2i] = [vec1,vec2,vec3,vec4,vec5]
	var arr2: Array[Vector2i] = [vec1,vec2,vec3,vec1,vec5]
	var arr3: Array[Vector2i] = [vec1,vec2,vec3,vec4,vec5]
	assert_eq(CustomMath.get_uniqe_tail_array_vector(arr1, arr2), [arr1.slice(3), arr2.slice(3)])
	assert_eq(CustomMath.get_uniqe_tail_array_vector(arr1, arr3), [[],[]])


